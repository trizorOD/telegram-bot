
import os


from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, CallbackQueryHandler


# üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = 467438413  # ‚Üê –£–∫–∞–∂–∏—Ç–µ –≤–∞—à Telegram ID –æ—Ç @userinfobot
# ADMIN_ID = 320352130  # ‚Üê –£–∫–∞–∂–∏—Ç–µ –≤–∞—à Telegram ID –æ—Ç @userinfobot

user_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_data[chat_id] = {'step': 'product_name', 'items': []}

    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞:")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = update.message.text

    if chat_id not in user_data:
        user_data[chat_id] = {'step': 'product_name', 'items': []}
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:")
        return

    state = user_data[chat_id]
    step = state['step']

    if step == 'product_name':
        state['current_product'] = text
        state['step'] = 'quantity'
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
    elif step == 'quantity':
        product = state['current_product']
        quantity = text
        state['items'].append({'product': product, 'quantity': quantity})
        state['step'] = 'awaiting_choice'

        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data='add_more')],
            [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='finish_order')]
        ]
        await update.message.reply_text("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ç–æ–≤–∞—Ä –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑?", reply_markup=InlineKeyboardMarkup(keyboard))

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat.id
    state = user_data.get(chat_id)

    if query.data == 'new_order':
        user_data[chat_id] = {'step': 'product_name', 'items': []}
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:")
        return


    if query.data == 'add_more':
        state['step'] = 'product_name'
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞:")
    elif query.data == 'finish_order':
        items = state['items']
        user = query.from_user
        user_mention = f"@{user.username}" if user.username else str(user.id)

        lines = [f"üì¶ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:", f"üîπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - {user_mention}", ""]
        for idx, item in enumerate(items, 1):
            lines.append(f"{idx}. {item['product']} ‚Äî {item['quantity']} —à—Ç.")

        message = "\n".join(lines)

        try:
            await context.bot.send_message(chat_id=ADMIN_ID, text=message)
            print("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")

        # –°–±—Ä–æ—Å–∏–º —Ñ–æ—Ä–º—É
        keyboard = [[InlineKeyboardButton("–ù–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data='new_order')]]
        await query.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.", reply_markup=InlineKeyboardMarkup(keyboard))
        del user_data[chat_id]

    elif query.data == 'new_order':
        user_data[chat_id] = {'step': 'product_name', 'items': []}
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:")

# –ó–∞–ø—É—Å–∫
app = ApplicationBuilder().token(BOT_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
app.add_handler(CallbackQueryHandler(button_handler))

print("‚úÖ –ë–æ—Ç —Å –º—É–ª—å—Ç–∏-—Ç–æ–≤–∞—Ä–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏ –∑–∞–ø—É—â–µ–Ω...")
app.run_polling()
